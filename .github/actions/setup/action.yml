# Copyright 2024 RustFS Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Setup Rust Environment"
description: "Setup Rust development environment with caching for RustFS"

inputs:
  rust-version:
    description: "Rust version to install"
    required: false
    default: "stable"
  cache-shared-key:
    description: "Shared cache key for Rust dependencies"
    required: false
    default: "rustfs-deps"
  cache-save-if:
    description: "Condition for saving cache"
    required: false
    default: "true"
  install-cross-tools:
    description: "Install cross-compilation tools"
    required: false
    default: "false"
  target:
    description: "Target architecture to add"
    required: false
    default: ""
  github-token:
    description: "GitHub token for API access"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          musl-tools \
          build-essential \
          lld \
          libdbus-1-dev \
          libwayland-dev \
          libwebkit2gtk-4.1-dev \
          libxdo-dev \
          pkg-config \
          libssl-dev \
          linux-modules-extra-"$(uname -r)"
          
    - name: Clean Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        temp-reserve-mb: 2048
        swap-size-mb: 4096
        remove-dotnet: true
        remove-android: true
        remove-haskell: true
        remove-codeql: true
        remove-docker-images: true
        
    - name: Optimize Memory Management
      shell: bash
      run: |
         sudo -E sysctl vm.swappiness=1
         sudo -E sysctl vm.min_free_kbytes=32768
         sudo -E sysctl vm.watermark_scale_factor=100
         sudo -E sysctl vm.watermark_boost_factor=15000
         sudo -E sysctl vm.overcommit_memory=1
         sudo -E sysctl vm.page-cluster=0
         sudo -E modprobe zram
         echo "0" | sudo -E tee /sys/class/block/zram0/mem_limit
         echo "zstd" | sudo -E tee /sys/class/block/zram0/comp_algorithm
         echo "$(awk 'NR==1{print $2*1000}' </proc/meminfo)" | sudo -E tee /sys/class/block/zram0/disksize
         sudo -E mkswap /dev/zram0
         sudo -E swapon -p 100 /dev/zram0
         echo "Y" | sudo -E tee /sys/kernel/mm/lru_gen/enabled
         echo "1000" | sudo -E tee /sys/kernel/mm/lru_gen/min_ttl_ms
         echo "1" | sudo -E tee /sys/kernel/mm/swap/vma_ra_enabled

    - name: Install protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "31.1"
        repo-token: ${{ inputs.github-token }}

    - name: Install flatc
      uses: Nugine/setup-flatc@v1
      with:
        version: "25.2.10"

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.rust-version }}
        targets: ${{ inputs.target }}
        components: rustfmt, clippy

    - name: Install Zig
      if: inputs.install-cross-tools == 'true'
      uses: mlugg/setup-zig@v2

    - name: Install cargo-zigbuild
      if: inputs.install-cross-tools == 'true'
      uses: taiki-e/install-action@cargo-zigbuild

    - name: Install cargo-nextest
      uses: taiki-e/install-action@cargo-nextest

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
        cache-on-failure: true
        shared-key: ${{ inputs.cache-shared-key }}
        save-if: ${{ inputs.cache-save-if }}

    - name: Setup rust nightly musl toolchains
      shell: bash
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain nightly --profile default -y
        rustup default nightly
        rustup component add rust-src llvm-tools-preview
        # rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
        rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-musl
      
        # rustup component add rust-src --toolchain nightly-aarch64-unknown-linux-gnu
        rustup component add rust-src --toolchain nightly-aarch64-unknown-linux-musl
      
        rustup target add aarch64-unknown-linux-musl --toolchain nightly
        rustup target add x86_64-unknown-linux-musl --toolchain nightly
        rustup update
