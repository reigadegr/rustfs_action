name: Get Source

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "使用的工具链"
        required: true
        default: "nightly"
        options:
          - "nightly"
          - "stable"
      TARGET:
        type: choice
        description: "编译的目标三元组"
        required: true
        default: "aarch64-unknown-linux-musl"
        options:
          - "aarch64-unknown-linux-musl"
          - "x86_64-unknown-linux-musl"
          - "x86_64-pc-windows-msvc"
          - "aarch64-apple-darwin"
          - "x86_64-apple-darwin"
      USE_MIMALLOC:
        type: boolean
        description: "是否使用mimalloc替代tikv-jemallocator？"
        required: true
        default: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0
  TZ: Asia/Shanghai

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected TOOLCHAINS: ${{ github.event.inputs.TOOLCHAINS }}"
          echo "Selected TARGET: ${{ github.event.inputs.TARGET }}"
          echo "Selected USE_MIMALLOC: ${{ github.event.inputs.USE_MIMALLOC }}"
          echo "-----------------------"

  # Build RustFS binaries
  build-rustfs:
    name: Build Utils
    needs: [build-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'macos' || 'ubuntu') }}-latest
            target: ${{ github.event.inputs.TARGET }}
            cross: ${{ contains(github.event.inputs.TARGET, 'linux') && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Setup TimeZone
        if: runner.os == 'Linux'
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Clone rustfs sources
        shell: bash
        run: |
          git clone --depth 1 https://github.com/rustfs/rustfs rustfs_tmpdir
          cd rustfs_tmpdir
          rm -rf rustfs_tmpdir rust-toolchain.toml || true

      - name: Build static console assets
        env:
          FORCE_COLOR: 1
          PNPM_COLOR: always
        shell: bash
        run: |
          cd rustfs_tmpdir
          git clone --depth 1 https://github.com/rustfs/console rustfs_consule
          cd rustfs_consule
          rm -f *lock*
          npm install -g pnpm
          pnpm add -D @types/lodash
          pnpm add lodash-es
          pnpm add -D @types/lodash-es
          pnpm update; pnpm upgrade
          pnpm install --no-frozen-lockfile
          git add  . && git commit -m "auto commit" || true
          for i in "fix_seemly.patch" \
            "fix_loaddash.patch" \
            "fix_strong_type.patch" \
            "default_admin.patch"; do
             url="https://github.com/reigadegr/rustfs_action/raw/main/patchs/$i"
             echo "补丁直链: $url"
             curl -L $url -o "$i"
             patch -p1 -F 3 < $i && git add  . && git commit -m "auto commit" || git reset --hard
             git clean -df
          done
          NITRO_PRESET=static pnpm build
          cd  ..
          mkdir -p ./rustfs/static
          cp -rf rustfs_consule/dist/* ./rustfs/static
          rm -rf rustfs_consule || echo "删除前端冗余资源失败"
          rm -rf .pnpm* || echo "删除前端冗余资源.pnpm失败"

      - name: Fix upstream bugs
        shell: bash
        run: |
          cd rustfs_tmpdir
          git init || echo "无需init"
          rm -rf target && echo "删除了target" || echo "无需删除"
          git add  . && git commit -m "auto commit"
          if [ "${{ github.event.inputs.USE_MIMALLOC }}" = "true" ]; then
            malloc="use_mimalloc.patch"
          else
            malloc="jemalloc_musl_fix.patch"
          fi

          is_windows="${{ contains(github.event.inputs.TARGET, 'windows') && 'true' || 'false' }}"
          if [ "$is_windows" = "true" ]; then
              malloc="use_mimalloc.patch"
          fi

          for i in "full_opt.patch" \
            "$malloc"; do
             url="https://github.com/reigadegr/rustfs_action/raw/main/patchs/$i"
             echo "补丁直链: $url"
             curl -L $url -o "$i"
             patch -p1 -F 3 < $i && git add  . && git commit -m "auto commit" || git reset --hard
             git clean -df
          done

      - name: Build RustFS
        shell: bash
        run: |
          cd rustfs_tmpdir
          rm -rf target && echo "删除了target" || echo "无需删除"
          # Force rebuild by touching build.rs
          touch rustfs/build.rs
          toolchain="${{ github.event.inputs.TOOLCHAINS }}"
          platform="${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'apple' || 'linux') }}"
          file="build_"$toolchain"_"$platform".sh"

          url="https://github.com/reigadegr/rustfs_action/raw/main/$file"
          echo "脚本直链: $url"
          curl -L $url -o "$file"

          bin_name="rustfs"
          # sh "$file" "${{ matrix.target }}" "$bin_name"
          

      - name: Fix post setup rust environment step
        shell: bash
        run: |
          rm -rf .github/actions/setup || echo "不需要删除目录"
          mkdir -p .github/actions/setup || echo "不需要创建目录"
          curl -L https://github.com/reigadegr/rustfs_action/raw/main/.github/actions/setup/action.yml -o .github/actions/setup/action.yml

      - name: Upload to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.TARGET }}_rustfs_sources
          path:  rustfs_tmpdir/*
          retention-days: 1
